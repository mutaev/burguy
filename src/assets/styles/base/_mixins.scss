@mixin r($width) {
   @media only screen and (max-width: $width) {
      @content;
   }
}

@mixin rh($height) {
   @media only screen and (max-height: $height) {
      @content;
   }
}

@mixin xl {
   @media (min-width: 1600px) {
      @content;
   }
}

@mixin lg {
   @media (min-width: 1300px) and (max-width: 1599px) {
      @content;
   }
}

@mixin md {
   @media (min-width: 1000px) and (max-width: 1299px) {
      @content;
   }
}

@mixin sm {
   @media (min-width: 700px) and (max-width: 999px) {
      @content;
   }
}

@mixin xs {
   @media (max-width: 699px) {
      @content;
   }
}

// Fluid fonts
// See https://habr.com/post/310186/
// Also check _layout.sass, fix for Safari is required

@function strip-unit($number) {
   @if type-of($number) == 'number' and not unitless($number) {
      @return $number / ($number * 0 + 1);
   }

   @return $number;
}

@function calcFluidFontSize($f-min, $f-max, $w-min, $w-max, $units: px) {
   $f-min: strip-unit($f-min);
   $f-max: strip-unit($f-max);
   $w-min: strip-unit($w-min);
   $w-max: strip-unit($w-max);

   $k: ($f-max - $f-min) / ($w-max - $w-min);
   $b: $f-min - $k * $w-min;

   $b: $b + $units;

   @return calc( #{$k} * 100vw + #{$b} );
}

@mixin fluidFontSize($f-min, $f-max, $w-min, $w-max, $fallback: false) {
   font-size: $f-min;

   @media (min-width: $w-min) {
      @if ($fallback) {
         font-size: $fallback;
         font-size: calcFluidFontSize($f-min, $f-max, $w-min, $w-max, px);
      }
   }
   
   @media (min-width: $w-max) {
      font-size: $f-max;
   }
}

@mixin font($font_name, $file_name, $weight, $style) {
   @font-face {
      font-family: $font_name;
      font-display: swap;
      src: url("../fonts/#{$file_name}.woff2") format("woff2"), url("../fonts/#{$file_name}.woff") format("woff");
      font-weight: #{$weight};
      font-style: #{$style};
   }
}

@function percent($px, $from) {
   $result: math.div($px, $from) * 100%;
   @return $result;
}

@function rem($px) {
   $result: math.div($px, 16) + rem;
   @return $result;
}

@function em($px, $current: 16) {
   $result: math.div($px, $current) + em;
   @return $result;
}

@mixin currency($sym) {
   &::after {
      content: "#{$sym}";
   }
}

@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
   display: grid;
   gap: $gap;
   grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}